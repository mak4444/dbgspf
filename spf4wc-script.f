CR.f 
see qwer

\eof
\  : BLANKS 0 ?DO BL EMIT LOOP ;
GETXY . . GETXY . . 
\EOF
: XXX  [ 0x808D W, 0x80 , ] ;
SEE XXX

\EOF
: CFA>NFA
 WordByAddr  DROP 1- ;


: .S DEPTH .SN ;

ALSO ASSEMBLER ALSO ASM-HIDDEN

.( CALL-COMPILE=)  ' CALL-COMPILE .


: MAYBE-HAS-OFFSET1 ( FLAG THAT WE'VE PICKED SOMETHING UP FROM THE STACK )
        ( -- )
 CR ." M0="  .S
        MAYBE-OFFSET-BIT
 CR ." M1="  .S
 1MODE-BIT!
 CR ." M2="  .S
 ;

: SAVE-OFFSET1 ( SAVE THE OFFSET, IF IT'S PRESENT )
        ( X -- | -- )
        DEPTH-CHANGE
 CR ." F0="  .S

 IF MAYBE-HAS-OFFSET1 ?DUP
 CR ." F4="  .S
 IF OFFSET-SV DATA-!
 CR ." F8="  .S
 HAS-OFFSET
 CR ." F9="  .S
        THEN THEN ;

: PARSE-CALL/JMP-OPERANDS1 ( PARSE THE OPERANDS FOR CALLS AND JUMPS )
        ( -- | X -- )
        0 RTYPE DATA-!
 CR ." P0="  .S
 BEGIN OP-DEPTH WHILE POP-OP DUP LIT-OP SHORT = OVER
        LIT-OP NEAR = OR OVER LIT-OP FAR = OR IF CASE LIT-OP SHORT OF
        IS-SHORT ENDOF LIT-OP NEAR OF IS-NEAR ENDOF IS-FAR ENDCASE ELSE
        0 ALL-EXCEPT SWAP OPERAND-CASES THEN REPEAT
 CR ." P9="  .S
 ?NOIMMED
 CR ." PA="  .S
 SAVE-OFFSET1
 CR ." PB="  .S
 ;

: CALL/JMP-ENTRY1 ( ENTRY FOR CALL AND JUMP )
        ( PARAM -- )
        DROP ?INST-PRE
 CR ." J0="  .S
 PARSE-CALL/JMP-OPERANDS1
 CR ." J2="  .S
 REGISTER ?BADTYPE
 CR ." J3="  .S
 CHECK-SIZES ;

: CALL-COMPILE1 ( COMPILE CALL )
        ( PARAM -- | X \ PARAM -- )
 CR ." c0="  .S
        CALL/JMP-ENTRY1
 CR ." c0="  .S
 ?NOSHORT
 CR ." c0="  .S
 GENERATE-PREFIXES IS-NEAR?
 CR ." c1="  .S
 IF HAS-MOD-R/M?
        IF 0xFF CODE-C, 2 INSTALL-/R COMPILE-FIELDS ELSE 0xE8 CODE-C,
 CR ." c2="  .S
 OFFSET-SV
        DATA-@ A16BIT? OFFSET16/32, THEN ELSE HAS-MOD-R/M? IF 0xFF CODE-C, 3
        INSTALL-/R COMPILE-FIELDS ELSE 0x9A CODE-C, OFFSET-SV DATA-@ A16BIT?
        IF CODE-W, ELSE CODE-D, THEN CODE-W, THEN THEN ;

: SAVE-INST1 ( SAVE THE CURRENT INSTRUCTION, AND FETCH THE PREVIOUS ONE )
        ( ALSO SWAPS INSTRUCTION PREFIXES )
        ( A -- A' )
        INST-SAVE
 CR ." I1="  .S
 DUP DATA-@ >R DATA-! R>
 CR ." I1="  .S
 INST-PREFIX SV-INST-PREFIX
 CR ." I2="  .S
        2DUP DATA-@ SWAP DATA-@ ROT DATA-! SWAP DATA-! ;

: COMPILE-OPCODE1 ( COMPILE THE BYTES IN AN OPCODE )
        ( 0 -- | A -- | X \ A -- | X \ X' \ A -- )
        ( OS: X ... -- )
        ( A IS THE ADDRESS OF A TWO CELL DATA STRUCTURE: )
        ( OFFSET 0 -- XT OF THE ACTUAL ROUTINE TO COMPILE THE CODE )
        ( OFFSET 1 -- PARAMETER USED TO GENERATE THE CODE )
 CR ." C1="  .S
        ?DUP IF
                DUP CELL+ DATA-@ SWAP DATA-@ REGISTER-ASM

 CR ." C2="  .S
 DUP CFA>NFA ID.
 EXECUTE
 CR ." C3="  .S
        THEN ;


: COMPILE-OPCODE1 ( COMPILE THE BYTES IN AN OPCODE )
        ( 0 -- | A -- | X \ A -- | X \ X' \ A -- )
        ( OS: X ... -- )
        ( A IS THE ADDRESS OF A TWO CELL DATA STRUCTURE: )
        ( OFFSET 0 -- XT OF THE ACTUAL ROUTINE TO COMPILE THE CODE )
        ( OFFSET 1 -- PARAMETER USED TO GENERATE THE CODE )
 CR ." C1="  .S
        ?DUP IF
                DUP CELL+ DATA-@ SWAP DATA-@ REGISTER-ASM

 CR ." C2="  .S
 DROP \  EXECUTE

 CALL-COMPILE1

 CR ." C3="  .S
        THEN ;

: AAAAAA
  SAVE-INST1
 CR ." S1="  .S

 COMPILE-OPCODE1
 CR ." S2="  .S
 RESET-FOR-NEXT-INSTR
 SAVE-DEPTH
 CR ." S4="  .S
 ;
PREVIOUS
PREVIOUS

CODE WWWW
 CALL ' WORDS
  0 AAAAAA
\  XOR EAX, EAX
 RET
END-CODE

\EOF
: CFA>NFA
 WordByAddr  DROP 1- ;

\EOF
: LIT
 F7_ED
  R>
 DUP @ 
SWAP CELL+
 >R ;

: 777.   [ ' LIT COMPILE, 777 , ] . ;

\EOF
0 [IF]
[IFDEF]
[ELSE] XXXXXX
[THEN]
[THEN]

\EOF
0 VALUE VMOD
0 VALUE VDATA
: xxx 
  TO VMOD
  TO VDATA
  0 VDATA
  begin
  VDATA * VMOD mod  SWAP 1+ SWAP 
   dup VDATA =
  until
  . .
;

: ZZZ 
  TO VMOD
  DUP TO VDATA
  2 0 DO VDATA * VMOD UMOD LOOP
  VMOD 2 - 1- 0 DO VDATA * VMOD UMOD LOOP

;

\EOF
IMAGE-BEGIN 0x400 - 0x30B54 + NEAR_NFA  44 DUMP 
 44 DUMP 